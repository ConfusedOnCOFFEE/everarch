* define a sample xslt for file claim to attribute claim
we already have a file-claim defined in everarch. there should be a
new attribute claim which looks somehow like that:

#+BEGIN_SRC xml
<attr ref="sha3-224-…">
  <a op="+" k="tag" v="todo"/>
  <a op="-" k="someKey"/>
  <a op="-" k="someKey" v="someVal"/>
  <a op="=" k="replacedKey" v="replacedVal"/>
</attr>
#+END_SRC

each attribute key needs a definition claim before being indexable:
#+BEGIN_SRC xml
<attr-def k="tag" type="str"/>
<attr-def k="size" type="int"/>
#+END_SRC

there should be an example xslt which transforms a file claim into an
attribute claim like the one above. title should be transformed into a
title attribute. the sum of all slice sizes should be transformed into
a file size attribute.

there should be a file doc/claims.org which documents the different
claim types together with examples.
* define an attr indexer rule claim
an indexer claim is a claim for an attribute index. it contains an
xslt which transforms one specific claim type into an attr claim.

#+BEGIN_SRC xml
<attr-rule target-ns="https://evr.ma300k.de/claims/" target-name="file">
  <transformation>
    …
  </transformation>
</attr-rule>
#+END_SRC
* implement a get-file command in evr-glacier-cli
* introduce index-rule claim flag
add a flag bit which allows to declare claims for an indexer.
* implement an evr-attr-index service
watch a evr-glacier-storage server and build up an index of attr
claims.
* store flags and blob size redundant in buckets
right now flags and blob size in the evr-glacier-storage are storend
once for every blob and without any checksum.

there should be either a checksum for the two fields or it should be
stored redundant. this should reduce the risk of breaking a whole
bucket if one blob in it has a bit error.
* move glacier storage client functions into glacier-client.[hc]
right now the evr-glacier-cli.c contains functions for handling blob
put and blob get commands. code should be centralized in
glacier-client.[ch] in order to be reused in other future clients like
the file upload service.
* add setup hints to README
** gpg signing key
hint the user that the default gpg signing key is used for signing
claims. don't lose it and be aware of etc.
** config file locations
indicate where config files should be placed and how they should look
* replace struct chunk_set with linked list
dny-mem.h should provide one growable random access data structure and
one growable linked list data structure.

especially struct dynamic_array is not very well fitted for growing
because of the evr_chunk_set_max_chunks limitation.

struct dynamic_array should be renamed to hint the random access
usage. maybe rabuf instead of dynamic_array and llbuf for chunk_set.
* replace own queues with lib io_uring
inter thread communitcation queues have been implemented in struct
evr_work_watch_ctx and struct evr_persister_ctx.

for the sake of using well tested code we should check migrating our
own queues to lib io_uring. mentioned by pitrp.
* implement an evr-glacier-storage blob put/get benchmark
should connect via network socket. send lots of blobs. request lots of
blobs. count blobs per second. maybe different blob sizes etc.
* remove _t suffix from evr_blob_key_t and evr_fmt_blob_key_t
simply removing the suffix will make the type evr_fmt_blob_key clash
with the equally named formatting function.
* add option for flags to evr-glacier-cli put command
right now flags=0 is always sent when putting a blob to the storage.

the put flags should be specifyable using command line arguments in
the evr-glacier-cli tool.
* align chunk size with RLIMIT_FSIZE
see [[elisp:(manual-entry "setrlimit(2)")][setrlimit(2)]] for retrieving RLIMIT_FSIZE and limit the chunk size
regarding to it. also the chunk size should not grow over 1MB.
* create bucket directory if not existing :bdircre:
* repair out of sync bucket end pointer and file end offset :beprep:
the whole bucket should be scanned with validation of each key and
blob. if the file probably ends with one corrupt blob it should be
discarded.

it's important to be sensible about the discarded data at the end of
the file. maybe there should be an 'autorepair' flag in the
configuration.
