* evr-fs redirect stdout and stderr to log file
right now evr-fs output is redirected to /dev/null on daemonize. if a
log file is specified the output should be redirected to the log file
instead.
* evr-tls should have unit tests
there should be a unit test which opens a tls secured sever on some
random port. then a connection to that same port should be opened.

valgrind should validate some of the SSL context ref counting
assumptions made in the code.
* evr-fs crash during live updates                                      :bug:
systemd output
#+BEGIN_SRC
Nov 16 18:39:55 mammut systemd[1]: Starting evr-fs for animations...
Nov 16 18:39:55 mammut evr-fs[479787]: 2022-11-16T18:39:55 fD Parsing config file /home/animation/.config/everarch/evr-fs.conf
Nov 16 18:41:37 mammut systemd[1]: Started evr-fs for animations.
Nov 16 19:18:10 mammut systemd[1]: animation-fs.service: Main process exited, code=killed, status=6/ABRT
Nov 16 19:18:10 mammut systemd[1]: animation-fs.service: Failed with result 'signal'.
Nov 16 19:18:10 mammut systemd[1]: animation-fs.service: Consumed 2.349s CPU time.
Nov 16 19:18:12 mammut systemd[1]: animation-fs.service: Scheduled restart job, restart counter is at 1.
Nov 16 19:18:12 mammut systemd[1]: Stopped evr-fs for animations.
Nov 16 19:18:12 mammut systemd[1]: animation-fs.service: Consumed 2.349s CPU time.
Nov 16 19:18:12 mammut systemd[1]: Starting evr-fs for animations...
#+END_SRC

the evr-fs log output before the crash:
#+BEGIN_SRC
2022-11-16T19:17:41 fD Seed sha3-224-6e342f40e466ddcaaaafbb3ab9ed02ebed2426ca5161fcff0bd03970-0000 has changed in evr-attr-index
2022-11-16T19:17:41 fD Use SSL cert /home/animation/.config/everarch/evr-attr-index-cert.pem for localhost:2562
2022-11-16T19:17:41 fD Seed sha3-224-f34542af97eb1cce60af68d9c0f22aade8ee3ceaab636355a7397abe-0000 has changed in evr-attr-index
2022-11-16T19:17:41 fD Use SSL cert /home/animation/.config/everarch/evr-attr-index-cert.pem for localhost:2562
2022-11-16T19:17:44 fD Seed sha3-224-c98cc206cb7e3c4a16b381e47e1e64aaab3ab1c6e7ac3e3c51e398ce-0000 has changed in evr-attr-index
2022-11-16T19:17:44 fD Use SSL cert /home/animation/.config/everarch/evr-attr-index-cert.pem for localhost:2562
2022-11-16T19:18:10 fD Seed sha3-224-f9337b0f62ab461b135502f37a1f863b91ea8a0fb63375bc6e9d46f0-0000 has changed in evr-attr-index
2022-11-16T19:18:10 fD Use SSL cert /home/animation/.config/everarch/evr-attr-index-cert.pem for localhost:2562
#+END_SRC

gdb backtrace from core dump
#+BEGIN_SRC
(gdb) bt
#0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
#1  0x00007f33e3b85537 in __GI_abort () at abort.c:79
#2  0x00007f33e3be5a38 in __malloc_assert (assertion=assertion@entry=0x7f33e3cfecf8 "(unsigned long) (size) >= (unsigned long) (nb)", 
    file=file@entry=0x7f33e3cf9f88 "malloc.c", line=line@entry=4036, function=function@entry=0x7f33e3cff160 <__PRETTY_FUNCTION__.2> "_int_malloc") at malloc.c:298
#3  0x00007f33e3be9386 in _int_malloc (av=av@entry=0x7f33dc000020, bytes=bytes@entry=24) at malloc.c:4036
#4  0x00007f33e3bea299 in __GI___libc_malloc (bytes=24) at malloc.c:3066
#5  0x00007f33e3ecd34a in CRYPTO_zalloc () from /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1
#6  0x00007f33e3decba1 in ?? () from /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1
#7  0x00007f33e3dea6fb in ?? () from /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1
#8  0x00007f33e3dea9c3 in ?? () from /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1
#9  0x00007f33e3dead81 in ?? () from /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1
#10 0x00007f33e3dea196 in ?? () from /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1
#11 0x00007f33e3dea9c3 in ?? () from /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1
#12 0x00007f33e3dead81 in ?? () from /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1
#13 0x00007f33e3dea196 in ?? () from /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1
#14 0x00007f33e3deaeae in ASN1_item_ex_d2i () from /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1
#15 0x00007f33e3f4fd19 in ?? () from /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1
#16 0x00007f33e3dea14c in ?? () from /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1
#17 0x00007f33e3deab16 in ?? () from /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1
#18 0x00007f33e3dead81 in ?? () from /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1
#19 0x00007f33e3dea428 in ?? () from /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1
#20 0x00007f33e3deab16 in ?? () from /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1
#21 0x00007f33e3dead81 in ?? () from /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1
#22 0x00007f33e3dea428 in ?? () from /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1
#23 0x00007f33e3deaeae in ASN1_item_ex_d2i () from /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1
#24 0x00007f33e3deaf2b in ASN1_item_d2i () from /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1
#25 0x00007f33e407e647 in ?? () from /usr/lib/x86_64-linux-gnu/libssl.so.1.1
#26 0x00007f33e407a67d in ?? () from /usr/lib/x86_64-linux-gnu/libssl.so.1.1
#27 0x0000559af37dcf48 in evr_tls_connect (f=f@entry=0x7f33e18acd20, host=host@entry=0x559af4f9c4c0 "localhost", port=port@entry=0x559af4f9c4e0 "2562", 
    ssl_ctx=ssl_ctx@entry=0x7f33dc0078f0) at evr-tls.c:243
#28 0x0000559af37dd0ef in evr_tls_connect_once (f=f@entry=0x7f33e18acd20, host=host@entry=0x559af4f9c4c0 "localhost", port=port@entry=0x559af4f9c4e0 "2562", 
    cert_cfg=<optimized out>) at evr-tls.c:220
#29 0x0000559af37d9f09 in evr_connect_to_index (c=c@entry=0x7f33e18acd20, r=r@entry=0x7f33e18acd60, cfg=cfg@entry=0x559af37e9960 <cfg>, host=0x559af4f9c4c0 "localhost", 
    port=0x559af4f9c4e0 "2562") at evr-fs.c:405
#30 0x0000559af37db781 in evr_index_watch_worker_visit_changed_seed (ctx=ctx@entry=0x7ffd251cd010, 
    index_ref=index_ref@entry=0x7f33e18ace70 "\363\361\263Q\200\207\273\206b.o\206\357@\253\367l\377\373\374\372\350\333\060%\033\256\252", 
    seed=seed@entry=0x7f33e18ace90 "\371\063{\017b\253F\033\023U\002\363z\037\206;\221\352\212\017\266\063u\274n\235", <incomplete sequence \360>, 
    last_modified=<optimized out>) at evr-fs.c:1101
#31 0x0000559af37d9616 in evr_attri_read_watch (r=0x559af5004110, visit_changed_seed=visit_changed_seed@entry=0x559af37db6e0 <evr_index_watch_worker_visit_changed_seed>, 
    ctx=0x7ffd251cd010) at evr-attr-index-client.c:248
#32 0x0000559af37d9cb4 in evr_index_watch_worker (_ctx=<optimized out>) at evr-fs.c:1073
#33 0x00007f33e442af5a in start_thread (arg=<optimized out>) at pthread_create.c:474
#34 0x00007f33e3c5faef in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95
(gdb) select-frame 3
(gdb) p size
$4 = 8
(gdb) p nb
$5 = 32
#+END_SRC
* evr-fs integration test which restarts evr-attr-index
evr-fs should work just like before the restart.
* evr-fs integration test which restarts evr-glacier-storage
evr-fs should work just like before the restart. restart should maybe
occur while a file within evr-fs is open.
* evr-fs should recreate inodes on evr-attr-index current index change
right now only seed changes are applied to the inode set. if the index
ref changes the whole inode set must be rebuilt.
* reserve .evr in root directory within evr-fs
.evr should always be an empty directory. event if a efs:file mapps to
.evr. it should be like a reserved namespace for future interaction
with evr-fs during runtime.
* document evr-fs in evr.texi
especially the seed-description xml format and the efs:file-set xml
format.
* add has key operator to attr query language
extend the attr query language to support searching for claims which
have a certain key.

not sure yet about the syntax:
#+BEGIN_SRC
tag=todo && some-key
tag=todo && some-key=*
has(some-key) // might clash with 'match functions' comming later
some-key!
#+END_SRC
* add not operator to attr query language
#+BEGIN_SRC
!tag=nsfw
!(tag=B || tag=C)
#+END_SRC

mapping the first example to sql would be quite easy because we could
do "c.seed not in (â€¦)". but how to map the braces part i'm not sure
yet.
* evr cli should validate put claim sets before upload
validate claims with [[https://relaxng.org/#validators][relax ng]] before putting them into
evr-glacier-storage.

validation should be a evr cli feature which is turned off by
default. user must supply a relax ng spec. still relax ng spec should
be stored in evr-glacier-storage.

xml validation practically can't be executed in evr-glacier-storage
because the relax ng spec would need to be universal for at least all
past claims.
* support xsl:import with blob ref in xslt
evr uses xslt stylesheets when transforming claims in evr-attr-index
and when producing file metadata in evr-fs.

both places should support xsl:import statements so that stylesheets
can be structured. the xsl:import statements should be able to
reference blobs.
* glacier client must update flags in storage if necessary          :gcflgup:
right now the blob flags are untouched if the blob already
exists. this situation can actually happend if a user by accident
uploads a claim and misses the flags command line argument with evr
cli. if the user retries the upload with flags they will not be set.
* show in emacs if query is still running :emacs:
evr-attr-index commands like defun evr-attr-index-search-from-buffer
don't indicate wether they are still running or completed.

the user should be informed if the command completed. either by
showing a status like the emacs compile command or maybe a final line
in the buffer.
* parallel evr-fs inode building
right now evr-fs builds the inodes sequentially one seed by another.

building inodes should be performed in parallel in n threads. n should
probably be something like 4 so we don't open too many connections
towards evr-attr-index.
* evr sync should utilize the blob's last modified timestamp
right now evr sync walks through all blob refs and compares them
inbetween two evr-glacier-storage instances.

evr sync should have an optional state argument. when called with the
state argument evr cli should try to read a loast modified timestamp
from that state file. the sync should query only blob refs from the
two storages which appeared at or after the last modified timestamp.

this should speed up sync a lot for huge repositories. despite we will
loose some automatic restoration of blobs which got lost due to bit
flips in the buckets.
* migrate to partial evr-fs readdir buffer rebuilds
right now evr_fs_readdir in evr-fs.c builds the complete readdir
buffer only to report a slice of at an the end.

the off parameter should be used to communicate which inodes should
be read. probably the off parameter should be the directory child's
index from struct evr_fs_inode_dir.
* improve query error messages if at least bison 3.6 is available
bison before 3.6 does not support "%define parse.error
detailed". that's why everarch right now uses the value "verbose".

the configure script should detect the bison version and use
"detailed" if at least bison 3.6 is available.
* validate random blobs every 24 hours
so that basic sanity checks on servers with seldom reboots won't
happend seldom.
* open bucket file descriptor constant for uninitialized
glacier opens bucket files in a lazy way. the value for identifiying a
not yet opened bucket file should be a constant instead of just -1.
* add i18n support in attr query contains operator
right now sqlite is used for comparing values when using the attr
query contains (~) operator in a case insensitive way. the lower case
operation works only on ASCII characters. in order to get utf-8 lower
case conversion support the [[https://github.com/sqlite/sqlite/tree/master/ext/icu][sqlite ICU extension]] must be loaded.

test if this extension is part of the sqlite3 debian packaging. load
it gracefully. log info if it can't be loaded and continue.
* create bucket directory if not existing :bdircre:
* auto generate ssl cert and key if they don't exists
use some command like written in tls.txt
* add handling of too small bucket files
a bucket file which is smaller than the bucket file header of 4 bytes
should be recreated.
* add documentation on how to write attr-specs
** describe how attr is the central claim
** describe archive claim
** describe the seed and index-seed attributes
seed is provided before attr-factory calls and before each
transformation.

index-seed must be provided by transformation.
** describe how seed and index-seed must be handled in transformations
* reserve keywords in attr-query language
right now there are some keywords in attr-query language like for
example 'ref'. think about future keywords and reserve them so nobody
must rewrite queries in the future.
* ---- v0.1 boundary ----
everything above will be part of the first release of everarch. first
release means i will personally use it in production as mirror of my
perkeep stuff.
* evaluate http libraries for C
the evaluation should decide if the evr-web-server is implemented in C
, node.js or maybe deno.
* plan graph query approach
[[https://en.wikipedia.org/wiki/SPARQL][sparql]] queryability can be achieved via [[https://librdf.org/][librdf]] which stores data in
RDF. query output can be formatted with [[https://www.w3.org/TR/2013/REC-rdf-sparql-XMLres-20130321/][sparql xml results]].

we probably want to become a [[https://www.w3.org/wiki/SparqlEndpoints][SPARQL endpoint]]. despite this means we
need http support. SPARQL http access is described in [[https://www.w3.org/TR/2013/REC-sparql11-http-rdf-update-20130321/][SPARQL 1.1 Graph
Store HTTP Protocol]].
* report ref and some attributes specified by key in attr querries
the query might be something like: select title where tag=todo
* sort attr-query results by last modified timestamp
right now found claims are sorted by their creation date desc. further
sort orders should be able to be specified using a order by query
expression.

examples:
#+BEGIN_SRC
tag=todo order by last-modified
tag=todo order by last-modified desc
tag=todo order by last-modified asc
tag=todo order by created
tag=todo order by created desc
tag=todo order by created asc
#+END_SRC
* allow attr query args in quotes
#+BEGIN_SRC
'the key'='the value'
"the key"="the value"
#+END_SRC
* introduce evr-web-server
should bind to port 443 and respond some hello world as a demo.
* search seed claims endpoint for evr-web-server
GET /seeds?tag=todo
POST /seeds with query in post body?

responds found seed claims as JSON:

#+BEGIN_SRC
[
  {
    "ref": "sha3-224-â€¦",
    "attr": {
      "tag": ["todo"]
    }
  }
]
#+END_SRC
* introduce evr-web-explorer
HTML/CSS/JS application which allows exploring seed claims. should use the evr-web-server API for retrieving 
* evr-web-explorer should show seed claims
query /seeds evr-web-server endpoint and show the seeds as some kind
of list.
* parallel evr-attr-index claim-set preparation
indexing a claim-set can be splitted into two phases. a first phase
which fetches the claim-set XML, then applies the attr factories and
XSLT stylesheet on it. then a second phase which persists the attr and
archive claims into the index.

the first phase should be executed in parallel.

the solution might involve a ring buffer which n slots. each slot
holds one to be prepared claim-set. the slots in the ring buffer have
the states queued and prepared. there are n threads which fetch the
next queued slot and prepare it.
* ---- v0.2 boundary ----
everything above will be part of the second major release of everarch.

the vision of the second release is: let's go web
* get rid of double _ in defines
as they are not intended for userspace. mentioned by pitrp.
* sort attr-query results by a certain attr key
right now found claims are sortable by their creation and last
modification date. with this task sorting by a certain attr should be
possible.

examples:
#+BEGIN_SRC
tag=todo order by title
tag=todo order by title desc
tag=todo order by title asc
#+END_SRC
* add match functions to attr query language
#+BEGIN_SRC
tag=todo && is_image(mime_type)
#+END_SRC

the open question is how to define what the match functions are
actually doing. for example which mime types are treated as
image. this should not be coded into everarch. it would be nice to be
able to define them somehow in blobs.
* make boolean and operator '&&' optional in attr query language
#+BEGIN_SRC
(tag=todo || tag=backlog) tag=howto
#+END_SRC
* evr-glacier-storage should notify systemd when ready
the systemd service type notify uses a notification approach provided
by libsystemd-daemon.so so the service can tell systemd it's
ready. this notifications should be performed after
evr-glacier-storage is listening on the socket for incomming
connections.

the configure.ac scripts should detect if systemd support is
available. maybe it the libsystemd-daemos.so or something is
present. if it is not found evr-glacier-storage must be compiled
without any systemd dependency.
* user PRI macros in format strings for integers
right now many places use for example %d or %ld for printing integers
with defined sizes like int64_t. the PRI* macros from [[https://cplusplus.com/reference/cinttypes/][inttypes.h]]
should be used instead. this should guarantee compatibility for other
platforms.
* use $XDG_CONFIG_HOME to lookup configuration directory
XDG_* is defined by the [[https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html][basedir-spec]].
* replace struct chunk_set with struct evr_llbuf_s
child_size could be 1 and block_child_count may be 1MB.

especially because struct chunk_set is not very well fitted for
growing because of the evr_chunk_set_max_chunks limitation.

there should also be a function for writing linked lists to a file
descriptor using writev.
** TODO struct evr_auth_token_cfg should use the linked list
** TODO struct evr_cert_cfg should use the linked list
* rename struct dynamic_array to evr_rabuf
dny-mem.h should provide one growable random access data structure.

struct dynamic_array should be renamed to hint the random access
usage. maybe evr_rabuf instead of dynamic_array.

pitrp also suggests to copy the XARRAY or X_ARRAY implementation from
the linux kernel.
* keep bucket file sizes below RLIMIT_FSIZE
bucket file sizes shold be below RLIMIT_FSIZE. see [[elisp:(manual-entry "setrlimit(2)")][setrlimit(2)]] for
retrieving RLIMIT_FSIZE and limit the bucket size regarding to
it. also the chunk size should not grow over the configured limit.
* switch to mmap/msync for writing bucket files
and measure the io performance compared to open and fsync.
* add quic support
in order to get faster connection building and encryption.

the most interesting quic library to use right now would be [[https://github.com/microsoft/msquic][msquic]]
because it depends just on OpenSSL. OpenSSL with downstream patches
unfortunately. there are [[https://www.openssl.org/blog/blog/2021/12/03/starting-the-quic-design/][plans by the OpenSSL team]] to add quic
support.
* switch to io_uring for network io
* use readv and writev in struct evr_file
right how read and write operations use via evr_file implement thea
read/write interface with one buffer.

struct evr_file should implement the readv and writev interface to
reduce the number of system calls needed.

the struct evr_file read and write functions should be removed. caller
code should be adjusted.
* introduce scripted transformations
attr specs should also support scripts which perform the claim
transformations instead of just xslt stylesheets.

a new transformation could look like this:

#+BEGIN_SRC xml
<attr-spec>
  <attr-def k="tag" type="str"/>
  <transformation type="bin" blob="sha3-224-00000000000000000000000000000000000000000000000000000000"/>
</attr-spec>
#+END_SRC

the transformation would point to an executable elf binary, shell or
python script.
* gracefully handle sqlite database is locked in evr-glacier-storage
sqlite's step function will exit with SQLITE_LOCKED if a table is
locked for more than 1sec (configured right now).

a SQLITE_LOCKED error should be indicated as 'resource temporary not
available' to the client.

i guess the basis for this task is no longer existent because we
switched to sqlite's WAL mode.
