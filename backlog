* make evr-glacier-storage port configurable
* make evr-attr-index port configurable
* gracefully handle sqlite database is locked in evr-attr-index
sqlite's step function will exit with SQLITE_LOCKED if a table is
locked for more than 1sec (configured right now). these locks happend
to me quite regularly when querrying the attr index while the index is
heavily fed with new claims.

a SQLITE_LOCKED error should be indicated as 'resource temporary not
available' to the client.

maybe the locks can be worked around when implementing journal mode as
mentioned in [[https://sqlite.org/wal.html][sqlite's WAL mode]] or [[https://phiresky.github.io/blog/2020/sqlite-performance-tuning/][SQLite performance tuning]]:

#+BEGIN_SRC
pragma journal_mode = WAL;
#+END_SRC
* turn off fsync for attr-index's sqlite
fsync calls can be turned off via sqlite pragma statement as show in
[[https://phiresky.github.io/blog/2020/sqlite-performance-tuning/][SQLite performance tuning]].

#+BEGIN_SRC
pragma synchronous = off;
#+END_SRC
* evr-attr-index should handle out of order blobs well
right now the blobs which make up a file must be present in the
evr-glacier-storage before the file claim is indexed by the
attr-index. otherwise the indexing might fail if attr-factories fetch
the file.

whenever an attr-factory fails the affected claim-set should be marked
as failed via a counter and the timestamp of the first time if failed
should be stored.
* re-index failed claim-sets
re-indexing of failed claim-sets should be performed regularly. maybe
we check for failed claim-sets every 30 seconds. the retries for
claim-sets should be made more sparse in an exponential manner. that
way a long failing claim-set will take up less resources.
* add sort order to watch command
by default the watch command emits the changed blob refs in the
temporal order the changes appeared.

it should be possible to emit the changed blob refs sorted by blob
ref.
* sync two evr-glacier-storage instances via evr cli
#+BEGIN_SRC
evr sync src-host:1234 dst-host:4321
evr sync --two-way first-host:1234 second-host:4321
#+END_SRC
synchronization should execute in two thread groups. one thread group
with one thread for comparing the blob refs which arrive via the
watches. a second thread group for performing a sync of one blob. the
second thread group should be able to scale to multiple threads.
* store flags and blob size redundant in buckets
right now flags and blob size in the evr-glacier-storage are storend
once for every blob and without any checksum.

there should be either a checksum for the two fields or it should be
stored redundant. this should reduce the risk of breaking a whole
bucket if one blob in it has a bit error.
* migrate tcp sockets to tls
remove the unencrypted tcp ports and only allow tls secured tcp
connections.
* add authentication
think of some kind of authentication for the network sockets and
implement it.
* make accepted gpg keys for verfification configurable
right now the blob signature verification accepts all valid gpg
keys. we only want to accept certain gpg keys which are probably our
own.

also the gpg public keys should be stored in the storage as
blobs. that way they should never be lost. the configuration should
reference the gpg keys sha3-224 hashes.
* add i18n support in attr query contains operator
right now sqlite is used for comparing values when using the attr
query contains (~) operator in a case insensitive way. the lower case
operation works only on ASCII characters. in order to get utf-8 lower
case conversion support the [[https://github.com/sqlite/sqlite/tree/master/ext/icu][sqlite ICU extension]] must be loaded.

test if this extension is part of the sqlite3 debian packaging. load
it gracefully. log info if it can't be loaded and continue.
* add claim-ref type in attr-spec's attr-def
add a new type which tells the attr-index to expect a reference to a
claim as value. attr-index should check if the value is parseable
using evr_parse_claim_ref(…).
* add documentation on how to write attr-specs
** describe how attr is the central claim
** describe archive claim
** describe the seed and index-seed attributes
seed is provided before attr-factory calls and before each
transformation.

index-seed must be provided by transformation.
** describe how seed and index-seed must be handled in transformations
* reserve keywords in attr-query language
right now there are some keywords in attr-query language like for
example 'ref'. think about future keywords and reserve them so nobody
must rewrite queries in the future.
* ---- v0.1 boundary ----
everything above will be part of the first release of everarch. first
release means i will personally use it in production as mirror of my
perkeep stuff.
* add not operator to attr query language
#+BEGIN_SRC
!tag=nsfw
!(tag=B || tag=C)
#+END_SRC

mapping the first example to sql would be quite easy because we could
do "c.seed not in (…)". but how to map the braces part i'm not sure
yet.
* sort attr-query results by last modified timestamp
right now found claims are sorted by their creation date desc. further
sort orders should be able to be specified using a order by query
expression.

examples:
#+BEGIN_SRC
tag=todo order by last-modified
tag=todo order by last-modified desc
tag=todo order by last-modified asc
tag=todo order by created
tag=todo order by created desc
tag=todo order by created asc
#+END_SRC
* sort attr-query results by a certain attr key
right now found claims are sortable by their creation and last
modification date. with this task sorting by a certain attr should be
possible.

examples:
#+BEGIN_SRC
tag=todo order by title
tag=todo order by title desc
tag=todo order by title asc
#+END_SRC
* add match functions to attr query language
#+BEGIN_SRC
tag=todo && is_image(mime_type)
#+END_SRC

the open question is how to define what the match functions are
actually doing. for example which mime types are treated as
image. this should not be coded into everarch. it would be nice to be
able to define them somehow in blobs.
* report ref and some attributes specified by key in attr querries
the query might be something like: select title where tag=todo
* make boolean and operator '&&' optional in attr query language
#+BEGIN_SRC
(tag=todo || tag=backlog) tag=howto
#+END_SRC
* gracefully handle sqlite database is locked in evr-glacier-storage
sqlite's step function will exit with SQLITE_LOCKED if a table is
locked for more than 1sec (configured right now).

a SQLITE_LOCKED error should be indicated as 'resource temporary not
available' to the client.
* add quic support
in order to get faster connection building and encryption.

the most interesting quic library to use right now would be [[https://github.com/microsoft/msquic][msquic]]
because it depends just on OpenSSL. OpenSSL with downstream patches
unfortunately. there are [[https://www.openssl.org/blog/blog/2021/12/03/starting-the-quic-design/][plans by the OpenSSL team]] to add quic
support.
* replace struct chunk_set with linked list
dny-mem.h should provide one growable random access data structure and
one growable linked list data structure.

especially struct dynamic_array is not very well fitted for growing
because of the evr_chunk_set_max_chunks limitation.

struct dynamic_array should be renamed to hint the random access
usage. maybe rabuf instead of dynamic_array and llbuf for chunk_set.

pitrp also suggests to copy the XARRAY or X_ARRAY implementation from
the linux kernel.

linked list chunk sizes maybe should be aligned with RLIMIT_FSIZE. see
[[elisp:(manual-entry "setrlimit(2)")][setrlimit(2)]] for retrieving RLIMIT_FSIZE and limit the chunk size
regarding to it. also the chunk size should not grow over 1MB.

there should also be a function for writing linked lists to a file
descriptor using writev.
* use writev instead of buf copying
writev can write mutliple buffers in one system call. this may reduce
the amout of memory being copied before a write call. there are
probably some places in glacier.c and the networking code which can
benefit from writev.
* introduce scripted transformations
attr specs should also support scripts which perform the claim
transformations instead of just xslt stylesheets.

a new transformation could look like this:

#+BEGIN_SRC xml
<attr-spec>
  <attr-def k="tag" type="str"/>
  <transformation type="bin" blob="sha3-224-00000000000000000000000000000000000000000000000000000000"/>
</attr-spec>
#+END_SRC

the transformation would point to an executable elf binary, shell or
python script.
* allow attr query args in quotes
#+BEGIN_SRC
'the key'='the value'
"the key"="the value"
#+END_SRC
* get rid of double _ in defines
as they are not intended for userspace. mentioned by pitrp.
* analyze and maybe replace own queues with lib io_uring
inter thread communitcation queues have been implemented in struct
evr_work_watch_ctx and struct evr_persister_ctx.

for the sake of using well tested code we should check migrating our
own queues to lib io_uring. mentioned by pitrp.
* implement an evr-glacier-storage blob put/get benchmark
should connect via network socket. send lots of blobs. request lots of
blobs. count blobs per second. maybe different blob sizes etc.
* create bucket directory if not existing :bdircre:
* repair out of sync bucket end pointer and file end offset :beprep:
the whole bucket should be scanned with validation of each key and
blob. if the file probably ends with one corrupt blob it should be
discarded.

it's important to be sensible about the discarded data at the end of
the file. maybe there should be an 'autorepair' flag in the
configuration.
