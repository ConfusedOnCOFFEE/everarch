* remove _t suffix from evr_blob_key_t and evr_fmt_blob_key_t
simply removing the suffix will make the type evr_fmt_blob_key clash
with the equally named formatting function.
* move glacier storage client functions into glacier-client.[hc]
right now the evr-glacier-cli.c contains functions for handling blob
put and blob get commands. code should be centralized in
glacier-client.[ch] in order to be reused in other future clients like
the file upload service.
* implement rolling checksum functions
the file claim creation late will need a function which splits a
stream into multiple smaller blobs.

librsync should be used for the implementation.
* implement a evr-file-storage service
should provide put and get endpoints for files.
* add setup hints to README
** gpg signing key
hint the user that the default gpg signing key is used for signing
claims. don't lose it and be aware of etc.
** config file locations
indicate where config files should be placed and how they should look
* implement an evr-glacier-storage blob put/get benchmark
should connect via network socket. send lots of blobs. request lots of
blobs. count blobs per second. maybe different blob sizes etc.
* add option for flags to evr-glacier-cli put command
right now flags=0 is always sent when putting a blob to the storage.

the put flags should be specifyable using command line arguments in
the evr-glacier-cli tool.
* align chunk size with RLIMIT_FSIZE
see [[elisp:(manual-entry "setrlimit(2)")][setrlimit(2)]] for retrieving RLIMIT_FSIZE and limit the chunk size
regarding to it. also the chunk size should not grow over 1MB.
* create bucket directory if not existing :bdircre:
* repair out of sync bucket end pointer and file end offset :beprep:
the whole bucket should be scanned with validation of each key and
blob. if the file probably ends with one corrupt blob it should be
discarded.

it's important to be sensible about the discarded data at the end of
the file. maybe there should be an 'autorepair' flag in the
configuration.
