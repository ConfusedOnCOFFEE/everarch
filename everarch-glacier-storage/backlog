* sha224 hash generator
should generate sha224 hashes (aka evr_blob_key_t) from data.
** potential libs are
*** libgcrypt20-dev                                               :doc:installed:
*** libmhash-dev :installed:
*** libghc-cryptohash-sha256-dev :doc:
*** libghc-skein-dev :doc:
*** libtomcrypt-dev
*** libwyhash-dev
* command parser
network clients should be able to request and send blobs via commands.

functions for parsing commands from buffers and formatting commands
into buffers is necessary.

should be an extractable piece of code so we can reuse it in a future
client.
* open network socket, spawn threads, process commands
* implement an integration test / benchmark
should connect via network socket. send lots of blobs. request lots of
blobs. count blobs per second. maybe different blob sizes etc.
* align chunk size with RLIMIT_FSIZE
see [[elisp:(manual-entry "setrlimit(2)")][setrlimit(2)]] for retrieving RLIMIT_FSIZE and limit the chunk size
regarding to it. also the chunk size should not grow over 1MB.
* create bucket directory if not existing :bdircre:
* repair out of sync bucket end pointer and file end offset :beprep:
the whole bucket should be scanned with validation of each key and
blob. if the file probably ends with one corrupt blob it should be
discarded.

it's important to be sensible about the discarded data at the end of
the file. maybe there should be an 'autorepair' flag in the
configuration.
