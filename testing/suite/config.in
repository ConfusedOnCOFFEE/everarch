# enable core dumps
ulimit -c unlimited

script_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"

HAS_FUSE=@HAS_FUSE_SUBST@
HAS_HTTPD=@HAS_HTTPD_SUBST@
BUILD_EVR_BACKUP=@BUILD_EVR_BACKUP_SUBST@

PATH="${script_dir}/../../src:${PATH}"
export PYTHONPATH="${script_dir}/../../python:${PYTHONPATH}"

# timeout of waits in seconds
evr_wait_timeout=20

glacier_storage_port=2461
glacier_storage_bucket_dir=storage
glacier_storage_cert_path="${script_dir}/../tls/glacier-cert.pem"
glacier_storage_auth_token='ac78ca737213680040b3c6420f04d6ede163e3a15fef022d281af87f31e25179'

secondary_glacier_storage_port=2561
secondary_glacier_storage_bucket_dir=secondary-storage
secondary_glacier_storage_auth_token='ee3e9ad7a89ef1745f54f91689207d27d1b976a2791dca30ce74aef5c251e40f'

attr_index_port=2462
attr_index_http_port=2463
attr_index_state_dir=attr-index
attr_index_cert_path="${script_dir}/../tls/attr-index-cert.pem"
attr_index_auth_token='7c0c40cb392ceeb42097988f21ed968f3590f25ae3deca8632e4a905cd340cbe'

evr_fs_mnt_dir=mnt
evr_glacier_fs_mnt_dir=glacier-mnt

if [ -e "${script_dir}/config.local" ]
then
    . "${script_dir}/config.local"
fi

# evr_now prints the current timestamp in a format as it can be used
# in claim-set creation attributes. for example
# 2022-11-14T19:11:16.347354Z.
evr_now() {
    date -u '+%Y-%m-%dT%H:%M:%S.%N' | sed 's/\(.*\.[0-9]\{6\}\)[0-9]*/\1Z/'
}

allocate_ports() {
    ensure_port_available "${glacier_storage_port}"
    ensure_port_available "${secondary_glacier_storage_port}"
    ensure_port_available "${attr_index_port}"
    ensure_port_available "${attr_index_http_port}"
}

write_evr_conf() {
    cat > evr.conf <<EOF
storage-port=${glacier_storage_port}
ssl-cert=localhost:${glacier_storage_port}:${glacier_storage_cert_path}
auth-token=localhost:${glacier_storage_port}:${glacier_storage_auth_token}
ssl-cert=localhost:${secondary_glacier_storage_port}:${glacier_storage_cert_path}
auth-token=localhost:${secondary_glacier_storage_port}:${secondary_glacier_storage_auth_token}
index-port=${attr_index_port}
auth-token=localhost:${attr_index_port}:${attr_index_auth_token}
ssl-cert=localhost:${attr_index_port}:${attr_index_cert_path}
EOF
    append_accepted_gpg_keys >> evr.conf

    cat > evr-fs.conf <<EOF
storage-port=${glacier_storage_port}
ssl-cert=localhost:${glacier_storage_port}:${glacier_storage_cert_path}
auth-token=localhost:${glacier_storage_port}:${glacier_storage_auth_token}
index-port=${attr_index_port}
auth-token=localhost:${attr_index_port}:${attr_index_auth_token}
ssl-cert=localhost:${attr_index_port}:${attr_index_cert_path}
EOF
    append_accepted_gpg_keys >> evr-fs.conf

    cat > evr-glacier-fs.conf <<EOF
storage-port=${glacier_storage_port}
ssl-cert=localhost:${glacier_storage_port}:${glacier_storage_cert_path}
auth-token=localhost:${glacier_storage_port}:${glacier_storage_auth_token}
EOF
    append_accepted_gpg_keys >> evr-glacier-fs.conf

    cat > evr-glacier-storage.conf <<EOF
port=${glacier_storage_port}
cert=${glacier_storage_cert_path}
key=${script_dir}/../tls/glacier-key.pem
auth-token=${glacier_storage_auth_token}
bucket-dir=${glacier_storage_bucket_dir}
EOF

    cat > evr-attr-index.conf <<EOF
state-dir=${attr_index_state_dir}
port=${attr_index_port}
storage-port=${glacier_storage_port}
storage-auth-token=${glacier_storage_auth_token}
cert=${attr_index_cert_path}
key=${script_dir}/../tls/attr-index-key.pem
auth-token=${attr_index_auth_token}
ssl-cert=localhost:${glacier_storage_port}:${glacier_storage_cert_path}
EOF
    append_accepted_gpg_keys >> evr-attr-index.conf
    if [[ "${HAS_HTTPD}" == 'true' ]]
    then
        echo "http-port=${attr_index_http_port}" >> evr-attr-index.conf
    fi

    cat > glacier-benchmark.conf <<EOF
storage-port=${glacier_storage_port}
ssl-cert=localhost:${glacier_storage_port}:${glacier_storage_cert_path}
auth-token=localhost:${glacier_storage_port}:${glacier_storage_auth_token}
ssl-cert=localhost:${secondary_glacier_storage_port}:${glacier_storage_cert_path}
auth-token=localhost:${secondary_glacier_storage_port}:${secondary_glacier_storage_auth_token}
EOF
}

append_accepted_gpg_keys() {
    gpg --list-keys --with-colons | grep '^fpr:' | sed 's/fpr::*\(.*\):/\1/' | while read fpr
    do
        echo "accepted-gpg-key=${fpr}"
    done
}

start_glacier_storage() {
    rm -rf -- "${glacier_storage_bucket_dir}" evr-glacier-storage.pid evr-glacier-storage.log
    mkdir -- "${glacier_storage_bucket_dir}"
    if [[ -e evr-glacier-storage.pid ]]
    then
        echo "Unable to start evr-glacier-storage. evr-glacier-storage.pid already exists" >&2
        exit 1
    fi
    echo "Starting evr-glacier-storage…"
    evr-glacier-storage --pid evr-glacier-storage.pid --log evr-glacier-storage.log
}

wait_for_glacier_storage() {
    wait_for_port "${glacier_storage_port}"
}

start_secondary_glacier_storage() {
    rm -rf -- "${secondary_glacier_storage_bucket_dir}" evr-glacier-storage-secondary.pid evr-glacier-storage-secondary.log
    mkdir -- "${secondary_glacier_storage_bucket_dir}"
    echo "Starting secondary evr-glacier-storage…"
    evr-glacier-storage --pid evr-glacier-storage-secondary.pid --log evr-glacier-storage-secondary.log --port "${secondary_glacier_storage_port}" --auth-token "${secondary_glacier_storage_auth_token}" --bucket-dir "${secondary_glacier_storage_bucket_dir}"
}

wait_for_secondary_glacier_storage() {
    wait_for_port "${secondary_glacier_storage_port}"
}

start_attr_index() {
    rm -rf -- "${attr_index_state_dir}" evr-attr-index.pid evr-attr-index.log
    mkdir -- "${attr_index_state_dir}"
    echo "Starting evr-attr-index…"
    evr-attr-index --pid evr-attr-index.pid --log evr-attr-index.log
}

stop_attr_index() {
    stop_via_pid_file 'evr-attr-index.pid'
}

wait_for_attr_index() {
    wait_for_port "${attr_index_port}"
    # query the index metadata. this will block until the first index
    # is available for queries.
    query_attr_index "i" > /dev/null
}

query_attr_index() {
    query="$1"
    echo "Execute test query on evr-attr-index: ${query}" >&2
    socat ${socat_opts} "openssl:localhost:${attr_index_port},cafile=${attr_index_cert_path}" stdio <<EOF
a token ${attr_index_auth_token}
${query}
exit
EOF
}

mount_evr_fs() {
    xslt_ref="$1"
    rm -rf -- "${evr_fs_mnt_dir}" evr-fs.log
    mkdir -p -- "${evr_fs_mnt_dir}"
    echo "Mounting evr-fs…"
    evr-fs --log evr-fs.log "xslt:blob:${xslt_ref}" ${evr_fs_opts} "${evr_fs_mnt_dir}"
}

umount_evr_fs() {
    parent_dir=`readlink -f .`
    mnt_dir="${parent_dir}/${evr_fs_mnt_dir}"
    findmnt -M "${mnt_dir}" >/dev/null && fusermount -u "${evr_fs_mnt_dir}" || true
}

mount_evr_glacier_fs() {
    rm -rf -- "${evr_glacier_fs_mnt_dir}" evr-glacier-fs.log
    mkdir -p -- "${evr_glacier_fs_mnt_dir}"
    echo "Mounting evr-glacier-fs…"
    evr-glacier-fs --log evr-glacier-fs.log ${evr_glacier_fs_opts} "${evr_glacier_fs_mnt_dir}"
}

umount_evr_glacier_fs() {
    parent_dir=`readlink -f .`
    mnt_dir="${parent_dir}/${evr_glacier_fs_mnt_dir}"
    findmnt -M "${mnt_dir}" >/dev/null && fusermount -u "${evr_glacier_fs_mnt_dir}" || true
}

wait_for_port() {
    local port="$1"
    SECONDS=0
    sleep 0.1
    while true
    do
        nc ${nc_opts} -q 0 localhost "${port}" < /dev/null && break
        if [[ "${SECONDS}" -ge "${evr_wait_timeout}" ]]
        then
            echo "Giving up waiting for port ${port}" >&2
            exit 1
        fi
        sleep 0.2
    done
}

wait_for_file() {
    local fn="$1"
    echo "Waiting for file ${fn}…"
    SECONDS=0
    sleep 0.1
    while true
    do
        if [[ -e "${fn}" ]]
        then
            break
        fi
        if [[ "${SECONDS}" -ge "${evr_wait_timeout}" ]]
        then
            echo "Giving up waiting for file ${fn}" >&2
            exit 1
        fi
        sleep 0.2
    done
    echo "Got file ${fn}"
}

wait_for_content() {
    local fn="$1"
    local expected_content="$2"
    echo "Waiting for file content ${fn}…"
    SECONDS=0
    sleep 0.1
    while true
    do
        if [[ -e "${fn}" ]]
        then
            local content=`cat "${fn}"`
            if [[ "${content}" == "${expected_content}" ]]
            then
                break
            fi
        fi
        if [[ "${SECONDS}" -ge "${evr_wait_timeout}" ]]
        then
            echo "Giving up waiting for file ${fn}" >&2
            exit 1
        fi
        sleep 0.2
    done
    echo "Got file content ${fn}"
}

ensure_port_available() {
    port="$1"
    nc ${nc_opts} -z localhost "${port}" && occupied=1 || occupied=0
    if [[ "${occupied}" == '1' ]]
    then
        echo "Port ${port} is not available for integration test. Aborting." >&2
        exit 1
    fi
}

# stop_everarch_servers is usually the target of a trap:
# trap stop_everarch_servers EXIT
stop_everarch_servers() {
    umount_evr_glacier_fs
    umount_evr_fs
    stop_attr_index
    stop_via_pid_file "evr-glacier-storage.pid"
    # test lock to make sure evr-glacier-storage has released lock
    if [[ -e "${glacier_storage_bucket_dir}/lock" ]]
    then
        flock -n "${glacier_storage_bucket_dir}/lock" true
    fi
    stop_via_pid_file "evr-glacier-storage-secondary.pid"
    # test lock to make sure evr-glacier-storage has released lock
    if [[ -e "${secondary_glacier_storage_bucket_dir}/lock" ]]
    then
        flock -n "${secondary_glacier_storage_bucket_dir}/lock" true
    fi
}

stop_via_pid_file(){
  local pid_file="$1"
  if [[ -e "${pid_file}" ]]
  then
    local pid=`cat "${pid_file}"`
    local fn=`basename "${pid_file}"`
    echo "Stopping ${pid} via ${fn}…"
    kill -v -s sigint "${pid}"
    while kill -0 "${pid}" 2>/dev/null
    do
        sleep 0.5
    done
    rm "${pid_file}"
  fi
}
