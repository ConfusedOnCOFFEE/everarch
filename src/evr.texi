\input texinfo
@setfilename evr.info
@settitle everarch

@copying
This manual is for everarch which is the hopefully ever lasting
archive.

Copyright @copyright{} 2022 Markus Per√∂bner

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the section entitled
``GNU Free Documentation License''.
@end quotation
@end copying

@dircategory Miscellaneous
@direntry
* everarch: (evr).           The hopefully ever lasting archive.
@end direntry

@ifnottex
@node Top
@top everarch

This manual is for everarch which is the hopefully ever lasting
archive.
@end ifnottex

@menu
* Overview::   Explains what everarch is about.
* Storing Data:: How is everarch storing data?
* The Everarch Applications:: Lists the applications bundled with everarch.
* Getting started:: How to setup everarch.
* Claims::     Details about the central data structure in everarch.
* evr-attr-index::  How indexing and finding claims works.
* Query Language::  Explains the claim query language.
* evr-fs:: Access everarch content from the file system.
* Backup:: How to backup everarch content.
* Index::      Complete index.
@end menu

@node Overview
@chapter Overview
everarch is a collection of applications to store your data. The goals
of everarch are:

@itemize
@item
store your tiny and GB sized files and provide an index
@item
make backups complete and fast
@item
store your data in a format which you still can read in 20 years in
_future scripting language_
@item
store your data in a way that allows you to easily adopt new data
structures without the need to migrate the existing data. 20 years of
migration will rot your data away.
@item
detect corrupt or externally modified data and restore it with
multiple partial backups
@end itemize

@noindent
What everarch is not:

@itemize
@item
a database which handles inserts every few milliseconds over a long
amount of time very well
@item
a multi user database which isolates each user's data
@end itemize

@noindent
everarch is right now in a pre alpha state. It's not intended to be
used for your production data yet. Check out the backlog file to see
what we are heading for in the v0.1 release.

@node Storing Data
@chapter Storing Data
The central term when it comes to storing data in everarch is
'claim'. You can think of claims as statements like 'roses are red'
coded in XML so computers can interpret them easily.

@example
<thing-color xmlns="https://my.domain/my-claims" thing="rose" color="red">
  Lately I was wandering through the garden and observed that roses are
  actually red.
</thing-color>
@end example

Everarch is storing these claims and can index them for finding them
later.

@c TODO describe term 'blob'

@node The Everarch Applications
@chapter The Everarch Applications
The core everarch applications are the evr-glacier-storage server, the
evr-attr-index server and a command line interface evr.

@example
        ________
       / bucket \
       | files  |
       \________/

           ^
           | reads / writes

  -----------------------    watches   ------------------
  | evr-glacier-storage |  <---------  | evr-attr-index |
  -----------------------              ------------------

           ^                                   ^
           | get / put                         | search index

  -----------------------               -----------------
  |       evr           |               |    socat      |
  -----------------------               -----------------
@end example

The evr-glacier-storage server stores claims and blob data in bucket
files. Claims are actually also stored as blobs but have some
additional attributes.

We assume every blob has a unique reference which is derived from the
blob's content. So blobs with the same content always have the same
reference. A blob reference might be
sha3-224-00000000000000000000000000000000000000000000000000000000.

@node Getting started
@chapter Getting started

This chapter guides through the steps of setting up everarch on one
host for one user. It assumes everarch has already been installed on
the host.

Claims are signed using GPG. So having a valid GPG key is
mandatory. Everarch can only handle GPG keys without a password for
now. If you already have a personal GPG key it is recommended to use
it. If no GPG key exists a new one can be created by calling the
following command:

@example
$ gpg --gen-key
@end example

The GPG wizzard will guide you through the process of creating a new
key.

The everarch servers require some configuration. This guide will
quickly step over the most important configuration options. More help
on possible configuration options may be available by calling for
example evr-glacier-storage with the --help argument. Every argument
may also be a configuration file option. Just leave the -- prefix away
in the configuration file.

The configuration is placed in the directory ~/.config/everarch. You
should make sure ~/.config/everarch is only readable by your user
because it will contain secret authentication and encryption
information.

The network communication between the everarch applications is
encrypted using TLS. TLS requires a public and private key pair which
can be generated using the openssl application:

@example
$ cd ~/.config/everarch
$ openssl req -newkey rsa:4096 -x509 -sha512 -nodes -days 712 \
    -out evr-glacier-storage-cert.pem -keyout evr-glacier-storage-key.pem
$ openssl req -newkey rsa:4096 -x509 -sha512 -nodes -days 712 \
    -out evr-attr-index-cert.pem -keyout evr-attr-index-key.pem
@end example

Then create the file ~/.config/everarch/evr-glacier-storage.conf. Copy
the following content into it:

@example
auth-token=<change this>
bucket-dir=~/var/everarch/glacier
cert=~/.config/everarch/evr-glacier-storage-cert.pem
key=~/.config/everarch/evr-glacier-storage-key.pem
@end example

The auth-token is a shared secret which clients of evr-glacier-storage
must provide. It must be a 64 characters string made of 0-9 and a-f
characters. openssl can be used to generate such a random string:

@example
$ openssl rand -hex 32
@end example

cert and key must point to the formerly generate TLS
certificates. Adjust the path accordingly.

The evr client applications has it's configuration file at
~/.config/everarch/evr.conf. Put the following content into it:

@example
auth-token=localhost:2361:<change this>
ssl-cert=localhost:2361:/path/to/.config/everarch/evr-glacier-storage-cert.pem
@end example

Change the auth-token option so it uses the same string as in the
evr-glacier-storage.conf file. Also adjust the path for ssl-cert so it
matches the one on your host.

Create the file ~/.config/everarch/evr-attr-index.conf for the
evr-attr-index server. Use the following content:

@example
auth-token=<change this>
storage-auth-token=<change this>
accepted-gpg-key=<change this>
state-dir=~/var/everarch/evr-attr-index
cert=~/.config/everarch/evr-attr-index-cert.pem
key=~/.config/everarch/evr-attr-index-key.pem
ssl-cert=localhost:2361:~/.config/everarch/evr-glacier-storage-cert.pem
@end example

Generate another auth-token just like before for the
evr-glacier-storage.conf file.

The storage-auth-token must be exactly the same value as from the
evr-glacier-storage.conf's auth-token property.

The accepted-gpg-key must be the fingerprint of the gpg key you
initially generated. A list of all available gpg keys can be obtained
via the following command:

@example
$ gpg --list-public-keys
@end example

Adjust the TLS paths with the cert, key and ssl-cert attributes to
point to the formerly generated certificates.

The everarch servers will only start if their data directories
exist. Create them:

@example
$ mkdir -p ~/var/everarch/glacier ~/var/everarch/attr-index
@end example

systemd is one option to start the everarch daemons. For normal
operation the evr-glacier-storage and evr-attr-index daemons must be
running.

Create a systemd user configuration for the evr-glacier-storage
server. It should be placed in
~/.config/systemd/user/evr-glacier-storage.service. The everarch git
repository contains an example evr-glacier-storage.service file within
the etc/systemd/user directory. Make sure the ExecStart property
points to the evr-glacier-storage binary on your host.

evr-attr-index requires a separate systemd configuration. Perform the
same steps as just done for the evr-glacier-storage configuration.

Now you should be able to start the evr-glacier-storage and
evr-attr-index servers:

@example
$ systemctl start evr-glacier-storage
$ systemctl start evr-attr-index
@end example

@node Claims
@chapter Claims
Claims are GPG signed XML documents which contain claim-set root
elements. An example claim-set may be:

@example
<?xml version="1.0" encoding="UTF-8"?>
<claim-set
    xmlns="https://evr.ma300k.de/claims/"
    xmlns:dc="http://purl.org/dc/terms/"
    dc:created="2022-04-23T16:32:07.000000Z"
    >
  <some-claim xmlns="https://my.claim.ns">
    This is the pice of fact we would like to store.
  </some-claim>
</claim-set>
@end example

A claim-set contains claims. everarch comes with a limited set of
supported claims. These include for example an attr claim which can
define attributes for itself or another seed claim.

Just like blobs claims also have references. A claim reference is the
blob reference which contains the claim-set concatinated with the
index of the claim in the claim-set. The index is encoded in
hexadecimal form. A claim reference might be
sha3-224-00000000000000000000000000000000000000000000000000000000-0000.

The following attr claim defines some attribute changes for a
referenced seed claim which was created in the past.

@example
<attr
    xmlns="https://evr.ma300k.de/claims/"
    seed="sha3-224-00000000000000000000000000000000000000000000000000000000-0000">
  <!-- adds the value v to the set of tag values -->
  <a op="+" k="tag" v="todo"/>

  <!-- empties the set of values for someKey -->
  <a op="-" k="someKey"/>

  <!-- removes the value v from the set of values for someKey -->
  <a op="-" k="someKey" v="someVal"/>

  <!-- replaces the set of values for replacedKey with replacedVal -->
  <a op="=" k="replacedKey" v="replacedVal"/>
</attr>
@end example

As you can see in the example you should be able to easily add your
own self defined claims. In order to make them searchable you must
provide an XSLT stylesheet which converts your claim into attr
claims.

@c TODO Also a file claim is supported which defines blobs which make up the pieces of a bigger file.

@node evr-attr-index
@chapter evr-attr-index
attr claims are the only claims which can be indexed by the
evr-attr-index server.

You should provide a XSLT stylesheet to the evr-attr-index server which
converts your custom claims into attr claims. Such a stylesheet might
look like the following example:

@verbatim
<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet
    version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:evr="https://evr.ma300k.de/claims/"
    xmlns:dc="http://purl.org/dc/terms/"
    xmlns:myns="https://my.claim.ns"
    >
  <xsl:output encoding="UTF-8"/>

  <xsl:template match="/evr:claim-set">
    <evr:claim-set dc:created="{@dc:created}">
      <xsl:apply-templates/>
    </evr:claim-set>
  </xsl:template>

  <xsl:template match="myns:some-claim">
    <evr:attr index-seed="{count(preceding-sibling::*)}">
      <evr:a op="=" k="class" v="some-claim"/>
    </evr:attr>
  </xsl:template>
</xsl:stylesheet>
@end verbatim

The evr-attr-index server needs a attr-spec claim to find the
stylesheet. The stylesheet and attr-spec claim are also located within
the evr-glacier-storage server as blobs. That way they are stored and
backed up just like any other data in everarch.

An example attr-spec might look like this:

@example
<?xml version="1.0" encoding="UTF-8"?>
<claim-set
    xmlns="https://evr.ma300k.de/claims/"
    xmlns:dc="http://purl.org/dc/terms/"
    dc:created="2022-04-23T16:32:07.000000Z"
    >
  <attr-spec>
    <attr-def k="tag" type="str"/>
    <transformation type="xslt" blob="sha3-224-00000000000000000000000000000000000000000000000000000000"/>
  </attr-spec>
</claim-set>
@end example

The evr-attr-index server searches for attr-spec claims and will
automatically start indexing the evr-glacier-storage in the way
defined in the attr-spec.

Claims, just like any other data in everarch, can't be deleted. So
what do you do if you like to store your contacts in everarch and also
want to delete them one day? You need one claim type to define a
contact. For example:

@example
<contact
    xmlns="https://whatever.my.domain/is">
  <name>Heribert Huber</name>
</contact>
@end example

@noindent
And if you wish another claim for archiving it:

@example
<archive-contact
    xmlns="https://whatever.my.domain/is"
    seed="sha3-224-00000000000000000000000000000000000000000000000000000000-0000">
<archive-contact>
@end example

The seed attribute on the archive-contact claim points to the contact
claim which initially created the contact. The seed attribute can also
be used to update existing claims:

@example
<contact
    xmlns="https://whatever.my.domain/is"
    seed="sha3-224-00000000000000000000000000000000000000000000000000000000-0000">
  <name>Heribert Meier</name>
</contact>
@end example

@node Query Language
@chapter Query Language
The evr-attr-index server can be queried for seed claims which match a
certain criteria.

You can either use the emacs evr.el module to perform searches or
connect to the evr-attr-index server using a TLS aware client like socat.

A complete search expression is made up of three optional parts:
@itemize
@item
An attribute selector which declares the attributes that are reported
for the matching seed claims.
@item
Conditions which must be fulfilled for each found seed claims.
@item
General search constraints like the effective time which should be used for the query and more.
@end itemize

A complete search query can look like this:

@example
select * where my-key=my-value && other-key=other-value at 2022-04-01T12:01:02.123000Z
@end example

The query above will find every seed claim which has the mattching
keys and values. The search is executed as if it was the first of
April in 2022. Every attribute of the found seed claims will be
reported.

@c TODO offset 0 limit 100

@node evr-fs
@chapter evr-fs
Everarch stores it's data within the evr-glacier-storage server. Data
within evr-glacier-storage can be accessed from the command line via
the evr application. An alternative way of accessing data from within
evr-glacier-storage is evr-fs. It's a virtual file system for
representing content from within evr-glacier-storage in a user defined
hierarchical way.

Using evr-fs involves usually the following steps:

@itemize
@item
Post files using evr application into evr-glacier-storage
@item
Configure evr-attr-index to index the posted files
@item
Write an evr-fs XSLT transformation to convert seeds from the
evr-attr-index into file metadata
@item
Mount evr-fs using the evr-fs XSLT
@end itemize

@node Backup
@chapter Backup
everarch should make backups quick and painless. This chapter lists
the things you must not forget for a complete backup.

everarch stores the user data in buckets managed by a
evr-glacier-storage instance. The first step for a backup is to define
a evr-glacier-storage configuration which stores the buckets an a
backup medium.

Start the evr-glacier-storage server which uses the backup medium. The
blobs can be synchronized from your main evr-glacier-storage instance
to the backup medium's evr-glacier-storage instance using the evr
command line interface. The following example assumes you synchronize
from your main instance running on port 2361 to your backup medium
instance running on port 2461.

@example
$ evr sync localhost:2361 localhost:2461
@end example

everarch relies on some external resources which can't be stored as
blobs. Don't forget to also backup them:

@itemize
@item
Your GPG keys used for validation must als be backed up. The GPG
manpage describes how to back them up using the --export. You don't
have to backup the secret keys. If you loose tke keys create new ones
and add them to the list of accepted GPG keys.
@item
Optionally the everarch configuration files should also be backed
up. Especially your SSL private key may otherwise not be recoverable.
@end itemize

@node Index
@unnumbered Index

@printindex cp

@bye
