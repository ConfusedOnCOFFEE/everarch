\input texinfo
@settitle everarch

@copying
This manual is for everarch which is the hopefully ever lasting
archive.

Copyright @copyright{} 2022 Markus Per√∂bner

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the section entitled
``GNU Free Documentation License''.
@end quotation
@end copying

@dircategory Miscellaneous
@direntry
* everarch: (evr).           The hopefully ever lasting archive.
@end direntry

@ifnottex
@node Top
@top everarch

This manual is for everarch which is the hopefully ever lasting
archive.
@end ifnottex

@menu
* Overview::    Explains what everarch is about.
* Index::            Complete index.
@end menu

@node Overview
@chapter Overview
everarch is a collection of applications to store your data. The goals
of everarch are:

@itemize
@item
store your tiny and GB sized files and provide an index
@item
make backups complete and fast
@item
store your data in a format which you still can read in 20 years in
_future scripting language_
@item
store your data in a way that allows you to easily adopt new data
structures without the need to migrate the existing data. 20 years of
migration will rot your data away.
@item
detect corrupt or externally modified data and restore it with a
partial backup
@end itemize

@noindent
What everarch is not:

@itemize
@item
a database which handles inserts every few milliseconds over a long
amount of time very well
@end itemize

@noindent
everarch is right now in a pre alpha state. It's not intended to be
used for your production data yet. Check out the backlog file to see
what we are heading for in the v0.1 release.

The core everarch applications are the evr-glacier-storage server, the
evr-attr-index server and a command line interface evr.

@example
        ________
       / bucket \
       | files  |
       \________/

           ^
           | reads / writes

  -----------------------    watches   ------------------
  | evr-glacier-storage |  <---------  | evr-attr-index |
  -----------------------              ------------------

           ^                                   ^
           | get / put                         | search index

  -----------------------               -----------------
  |       evr           |               |    netcat     |
  -----------------------               -----------------
@end example

The evr-glacier-storage server stores claims and blob data in the
bucket files. Claims are actually also stored as blobs but have some
additional attributes. Claims are PGP signed XML documents which
contain claim-set root elements. An example claim-set is located in
doc/claims/claim-set-file.xml.

A claim-set contains claims. everarch comes with a limited set of
supported claims. These include a attr claim which can set or remove
attributes from another claim. Also a file claim is supported which
defines blobs which make up the pieces of a bigger file.

You should be able to easily add your own self defined claims. In
order to make them indexable you must provide an XSLT stylesheet which
converts your claim into attr claims. doc/claims/file-to-attr.xslt
contains a stylesheet which converts a file claim for example into
attr claims.

attr claims are the only claims which can be indexed by the
evr-attr-index server.

The stylesheet is referenced by a attr-spec claim. An example
attr-spec claim is located in doc/claims/attr-spec.xml. The
evr-attr-index server searches for attr-spec claims and will
automatically start indexing the evr-glacier-storage in the way
defined in the attr-spec.

Claims just like any other data in everarch can't be deleted. So what
do you do if you like to store your contacts in everarch and also want
to delete them one day? You need one claim type to define a
contact. For example:

@example
<contact
    xmlns="https://whatever.my.domain/is">
  <name>Heribert Huber</name>
</contact>
@end example

@noindent
And if you wish another claim for archiving it:

@example
<archive-contact
    xmlns="https://whatever.my.domain/is"
    seed="sha3-224-00000000000000000000000000000000000000000000000000000000-0000">
<archive-contact>
@end example

The seed attribute on the archive-contact claim points to the contact
claim which initially created the contact. The seed attribute can also
be used to update existing claims:

@example
<contact
    xmlns="https://whatever.my.domain/is"
    seed="sha3-224-00000000000000000000000000000000000000000000000000000000-0000">
  <name>Heribert Meier</name>
</contact>
@end example

@node Index
@unnumbered Index

@printindex cp

@bye
