everarch - the hopefully ever lasting archive

1) Introduction
2) Build & Installation
3) Usage
4) Tests
5) License
6) Contact


------------------------------------------------------------------------
Introduction

everarch is a collection of applications to store your personal
data. The goals of everarch are:

- store your tiny and GB sized files
- provide a customized index over your data
- make backups complete and fast
- store your data in a format which you still can read in 20 years in
  _future programming language_
- store your data in a way that allows you to easily adopt new data
  structures without the need to migrate the existing data
- detect corrupt or externally modified data and restore it with a
  partial backup

What everarch is not:

- a database which handles inserts every few milliseconds over a long
  amount of time very well
- a multi user storage with fine grained access permissions

everarch is right now in a pre alpha state. It's not intended to be
used for your production data yet. Check out the backlog file to see
what we are heading for in the v0.1 release.


------------------------------------------------------------------------
Build & Installation

On linux you can execute the following within the everarch directory
to build the application.

Setup the build system once after you clone the repository:

$ autoreconf --install
$ ./configure

There are some feature toggles available with the configure
script. For example --enable-futile-claim-set-tracking. List them
with:

$ ./configure --help

Run every time you want to build the applications:

$ make

Install the applications:

$ make install


------------------------------------------------------------------------
Usage

A detailed manual can be found in src/evr.texi.


------------------------------------------------------------------------
Tests

Execute the following to run the whole test suite:

$ ./test.sh

Test execution relies on valgrind ( https://www.valgrind.org ).

Right now network ports are not configurable. That means the
integration tests will use the same port as a live instance. So you
have to stop your live instance before you execute the tests. Making
ports configurable is a task in the backlog.

The following steps should be performed when adding new tests. We
assume a test for x.h/x.c should be added.

Create a file which should contain the tests beside x.c with the name
x-test.c. Add a main function which tests x.h and x.c.

Add the test program to src/Makefile.am.


------------------------------------------------------------------------
License

See COPYING for details about everarch files copying conditions.

There are a few files which got a different license. See their header
comments for more details. These files include at least:

src/rollsum.h
src/rollsum.c

My sincere thank you goes out to the original authors Martin Pool and
Donovan Baarda.


------------------------------------------------------------------------
Contact

For questions about everarch you can contact me via email at Markus
Per√∂bner <markus.peroebner@gmail.com>.
